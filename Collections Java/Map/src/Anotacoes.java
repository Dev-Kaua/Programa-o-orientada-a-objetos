// üìö RESUMO SOBRE A INTERFACE MAP E SUAS IMPLEMENTA√á√ïES

import java.util.*;

public class Anotacoes {

    public static void main(String[] args) {

        // * INTERFACE MAP
        // ? Usada para armazenar dados em pares chave -> valor
        // ! Cada chave deve ser √∫nica
        // TODO: Aprender bem as opera√ß√µes b√°sicas e diferen√ßas entre implementa√ß√µes

        // * OPERACOES B√ÅSICAS:
        // put(k, v)              -> adiciona ou atualiza um par chave/valor
        // get(k)                 -> retorna o valor associado √† chave
        // remove(k)              -> remove o par com a chave indicada
        // containsKey(k)         -> verifica se a chave existe
        // containsValue(v)       -> verifica se o valor existe
        // size()                 -> quantidade de pares no Map
        // isEmpty()              -> verifica se o Map est√° vazio
        // keySet()               -> retorna um Set com todas as chaves
        // values()               -> retorna uma Collection com todos os valores
        // entrySet()             -> retorna um Set com os pares chave/valor (Map.Entry)

        // * IMPLEMENTA√á√ïES MAIS USADAS:

        // ? 1. HashMap
        // - N√£o mant√©m ordem dos elementos
        // - Permite uma chave e valores nulos
        // - R√°pido para buscas, inser√ß√µes e remo√ß√µes
        Map<String, String> hashMap = new HashMap<>();

        // ? 2. LinkedHashMap
        // - Mant√©m a ordem de inser√ß√£o
        // - Permite uma chave e valores nulos
        // - Ideal quando a ordem importa
        Map<String, String> linkedHashMap = new LinkedHashMap<>();

        // ? 3. TreeMap
        // - Mant√©m as chaves ordenadas (ordem natural ou personalizada via Comparator)
        // - N√£o permite chaves nulas
        // - √ötil quando a ordem das chaves √© importante
        Map<String, String> treeMap = new TreeMap<>();

        // ? 4. Hashtable (obsoleta em muitos casos)
        // - √â sincronizada (thread-safe)
        // - N√£o permite chaves nem valores nulos
        // - Substitu√≠da por ConcurrentHashMap em cen√°rios com m√∫ltiplas threads
        Map<String, String> hashtable = new Hashtable<>();

        // * COMO PERCORRER UM MAP (usando entrySet)
        for (Map.Entry<String, String> entry : hashMap.entrySet()) {
            System.out.println("üîë Chave: " + entry.getKey() + " | üì¶ Valor: " + entry.getValue());
        }

        // * EXEMPLOS DE USO DO MAP:    
        // - Agenda de contatos: nome -> telefone
        // - Dicion√°rio: palavra -> defini√ß√£o
        // - Estoque: c√≥digo -> produto
        // - Livraria: link -> livro
    }
}

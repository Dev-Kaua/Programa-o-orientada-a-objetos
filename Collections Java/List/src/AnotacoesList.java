/*
 * ðŸ“š ANOTAÃ‡Ã•ES â€“ JAVA COLLECTIONS: LIST INTERFACE
 * -------------------------------------------------------------
 * A interface List faz parte do framework de Collections do Java.
 * Ã‰ uma coleÃ§Ã£o ordenada que permite elementos duplicados.
 * Cada elemento tem uma posiÃ§Ã£o (Ã­ndice), comeÃ§ando do 0.
 * Classes mais comuns que implementam List:
 * - ArrayList
 * - LinkedList
 * - Vector
 * -------------------------------------------------------------
 */

 import java.util.*;

 public class AnotacoesList {
 
     public static void main(String[] args) {
 
         // ðŸ”¹ Criando uma lista com a interface List (mais flexÃ­vel)
         List<String> lista = new ArrayList<>();
 
         // âœ… Adicionando elementos
         lista.add("Java");
         lista.add("Python");
         lista.add("C++");
         lista.add("Java"); // Permitido duplicados
 
         // âœ… Acessando elementos por Ã­ndice
         String linguagem = lista.get(0); // Java
 
         // âœ… Removendo por Ã­ndice ou valor
         lista.remove(1); // remove "Python"
         lista.remove("Java"); // remove a primeira ocorrÃªncia de "Java"
 
         // âœ… Substituindo um elemento
         lista.set(0, "JavaScript");
 
         // âœ… Tamanho da lista
         int tamanho = lista.size();
 
         // âœ… Verifica se contÃ©m um elemento
         boolean contem = lista.contains("C++");
 
         // âœ… Iterando com for-each
         for (String item : lista) {
             System.out.println(item);
         }
 
         // âœ… Sublista
         List<String> subLista = lista.subList(0, 1); // Ã­ndice 0 atÃ© (1 - 1)
 
         // âœ… Ordenando (Collections.sort)
         Collections.sort(lista);
 
         // âœ… Embaralhar e inverter
         Collections.shuffle(lista);
         Collections.reverse(lista);
     }
 }
 
 /*
  * ðŸ”¸ ARRAYLIST
  * - Baseado em array redimensionÃ¡vel.
  * - RÃ¡pido para leitura com Ã­ndice (get).
  * - Mais lento para inserÃ§Ãµes/remoÃ§Ãµes no meio.
  * - NÃƒO Ã© sincronizado (nÃ£o Ã© thread-safe).
  */
 
 ArrayList<String> arrayList = new ArrayList<>();
 
 /*
  * ðŸ”¸ LINKEDLIST
  * - Baseado em lista duplamente ligada.
  * - RÃ¡pido para inserÃ§Ã£o/remoÃ§Ã£o no inÃ­cio/fim.
  * - Acesso por Ã­ndice Ã© mais lento (precisa percorrer).
  * - TambÃ©m implementa as interfaces Queue e Deque.
  */
 
 LinkedList<String> linkedList = new LinkedList<>();
 
 /*
  * ðŸ”¸ VECTOR
  * - Semelhante ao ArrayList, mas Ã© sincronizado.
  * - Mais seguro em ambientes multithread.
  * - Menos eficiente em desempenho geral.
  * - Uso em novos projetos Ã© desencorajado, prefira ArrayList.
  */
 
 Vector<String> vector = new Vector<>();
 
 /*
  * ðŸ“Œ DICAS:
  * - Prefira programar com a interface List ao invÃ©s das classes concretas.
  * - Escolha a implementaÃ§Ã£o conforme o uso: acesso por Ã­ndice (ArrayList) ou inserÃ§Ã£o rÃ¡pida (LinkedList).
  * - Use Collections.sort(lista) para ordenar, e .shuffle() para embaralhar.
  * - O mÃ©todo binarySearch() sÃ³ funciona em listas ordenadas!
  *
  * ðŸ“Ž ReferÃªncia oficial:
  * https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/util/List.html
  */
 